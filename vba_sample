Sub Create_and_Email_Output_PDF()
'This is a VBA script that emails a pdf based off data from Excel by using a Word Template.
'This is an example of scripts that have saved me a lot of time
'VBA can be useful given the task, especially when Excel is used as a main tool in an organization

'Dim Excel Ranges
Dim wb as Workbook
Dim EmailRange as Range
Dim VLookupResult as String

'Dim Word variables
Dim wdApp as Word.Application
Dim myDoc as Word.Document
Dim mywdRange as Word.Range

'Dim Outlook variables
Dim outApp as Object
Dim outMail as Object

'For speed
Application.ScreenUpdating = False

LastRowInput = Sheets("Input").Cells(Rows.Count, 2).End(xlUp).Row

'Loop
For i = 2 to LastRowInput:

With Sheets("Input")
  data1 = .Cells(i,1).Value
  data2 = .Cells(i,2).Value
  data3 = Application.WorksheetFunction.Vlookup(data1, Sheets("References").Range("A:F"), 4, False)
  data4 = Format(LEFT(data2, 9), "@")
End With

'Adds data to cell in the worksheet that is already selected
Cells(i, 5).Value = data4

'Trigger <- Usually with an "x" in a certain column
If UCase(Cells(i,6).Value) = "X" Then
  
  'Creates word doc 
  Set wdApp = New Word.Application
  With wdApp
    .Visible = True
    .WindowState = wdWindowStateMaximize
  End With
  
  'Sets variable as existing word template and opens it
  Template = "C:\Users\Paulo\VBA_template.dotx"
  Set myDoc = wdApp.Documents.Add(Template:=Template)
  
  'Finds data in word and replaces it with data from Excel
  With myDoc.Content.Find
    .Execute findText:="Last_Name", Replacewith:= data1, Format:=True, Replace:=wdReplaceAll
    .Execute findText:="Sales_Goal", Replacewith:= data2, Format:=True, Replace:=wdReplaceAll
    .Execute findText:="Deadline_Sales_Goal", Replacewith:= data3, Format:=True, Replace:=wdReplaceAll
  End With
  
  'Saves the PDF doc, with variables from each row and a timestamp
  todays_date = Format(Now, "dd-mm-yyyy")
  save_name = "Sales Goals for " & data1 & " " & todays_date
  
  'Path to where it will be saved
  file_path = "C:\Users\Paulo\Sales_Goals_Activity\"
  file_name = save_name & ".pdf"
  saving_destination = file_path & file_name
  myDoc.SaveAs2 Filename:=SavingDestination, FileFormat:=wdFormatPDF
  myDoc.Close SaveChanges:=wdDoNotSaveChanges 'this kills the word doc since all we want is the PDF
  wdApp.Quit
  
  'Creates Outlook object, attaches the pdf that was created to the email
  Set outApp = CreateObject("Outlook.Application")
  Set outMail = outApp.CreateItem(0)
  
  With outMail
    .To = data3
    .Subject = "Sales Goals"
    .Attachments.Add(saving_destination)
    .display
    '.send ' to send automatically
  End With
  
End If

Next i

'For speed
Application.ScreenUpdating = True
